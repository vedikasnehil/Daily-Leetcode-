2415. Reverse Odd Levels of Binary Tree

Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.
For example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].
Return the root of the reversed tree.

A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.

The level of a node is the number of edges along the path between it and the root node.


class Solution:
    def reverseOddLevels(self, root):
        def DFS(leftChild, rightChild, level):
            if not leftChild or not rightChild:
                return
            if level % 2 == 0:
                leftChild.val, rightChild.val = rightChild.val, leftChild.val
            DFS(leftChild.left, rightChild.right, level + 1)
            DFS(leftChild.right, rightChild.left, level + 1)

        DFS(root.left, root.right, 0)
        return root

Input
root =[2,3,5,8,13,21,34]
Output
[2,5,3,8,13,21,34]
